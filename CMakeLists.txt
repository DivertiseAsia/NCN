cmake_minimum_required(VERSION 3.10)
project(block_chain)

set(CMAKE_CXX_STANDARD 11)
#SET (CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS_INIT} $ENV{LDFLAGS}
#        CACHE STRING "-lssl -lcrypto")

#SET (CMAKE_MODULE_LINKER_FLAGS ${CMAKE_MODULE_LINKER_FLAGS_INIT} $ENV{LDFLAGS}
#        CACHE STRING "-lssl -lcrypto")

add_executable(block_chain main.cpp ./block_chain/chain ./block_chain/Message.cpp ./block_chain/Message.h ./block_chain/Node.cpp ./block_chain/Node.h ./block_chain/Serializer.cpp ./block_chain/Serializer.h ./block_chain/socket ./block_chain/utils ./block_chain/Validator.cpp ./block_chain/Validator.h ./block_chain/chain/block ./block_chain/chain/NodeState.cpp ./block_chain/chain/NodeState.h ./block_chain/chain/block/Block.cpp ./block_chain/chain/block/Block.h ./block_chain/chain/block/Component.cpp ./block_chain/chain/block/Component.h ./block_chain/chain/block/Hash.cpp ./block_chain/chain/block/Hash.h ./block_chain/chain/block/Metadata.h ./block_chain/chain/block/transaction ./block_chain/chain/block/transaction/Transaction.cpp ./block_chain/chain/block/transaction/Transaction.h ./block_chain/socket/Peer.cpp ./block_chain/socket/Peer.h ./block_chain/socket/Socket.cpp ./block_chain/socket/Socket.h ./block_chain/socket/SocketServer.cpp ./block_chain/socket/SocketServer.h ./block_chain/utils/Factory.hpp ./block_chain/utils/RSA.cpp ./block_chain/utils/RSA.h ./block_chain/utils/serialization ./block_chain/utils/serialization/Element.cpp ./block_chain/utils/serialization/ElementCreator.cpp ./block_chain/utils/serialization/Element.hpp ./block_chain/utils/serialization/json ./block_chain/utils/serialization/Parser.hpp ./block_chain/utils/serialization/json/JsonCreator.cpp ./block_chain/utils/serialization/json/JsonCreator.hpp ./block_chain/utils/serialization/json/JsonParser.cpp ./block_chain/utils/serialization/json/JsonParser.hpp transactions/StatusTransaction.cpp transactions/StatusTransaction.h transactions/MessagesTransaction.cpp transactions/MessagesTransaction.h validator/CustomSerializer.h validator/CustomSerializer.cpp block_chain/utils/Encoding.cpp block_chain/utils/Encoding.h block_chain/chain/block/Metadata.cpp block_chain/chain/block/transaction/TransactionContainer.cpp block_chain/chain/block/transaction/TransactionContainer.h block_chain/chain/block/transaction/MerkleTree.cpp block_chain/chain/block/transaction/MerkleTree.h database/Row.cpp database/Row.h block_chain/chain/Database.cpp block_chain/chain/Database.h block_chain/chain/Row.cpp block_chain/chain/Row.h transactions/MoneyTransaction.cpp transactions/MoneyTransaction.h block_chain/TransactionManager.cpp block_chain/TransactionManager.h block_chain/proof/Proof.cpp block_chain/proof/Proof.h block_chain/proof/ProofOfWork.cpp block_chain/proof/ProofOfWork.h block_chain/proof/ProofOfStake.cpp block_chain/proof/ProofOfStake.h block_chain/proof/ProofOfHold.cpp block_chain/proof/ProofOfHold.h block_chain/proof/ProofOfUse.cpp block_chain/proof/ProofOfUse.h block_chain/proof/ProofOfStakeTime.cpp block_chain/proof/ProofOfStakeTime.h block_chain/proof/ProofOfMinimumAgedStake.cpp block_chain/proof/ProofOfMinimumAgedStake.h block_chain/proof/ProofOfImportance.cpp block_chain/proof/ProofOfImportance.h)

# OpenSSL (find, include, link)
find_package(OpenSSL REQUIRED)
include_directories(${OPENSSL_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} ${OPENSSL_LIBRARIES})
